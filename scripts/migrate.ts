import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import fs from 'fs';
import path from 'path';

import { config } from '../src/config';
import { User } from '../src/models/User.model';
import { Project } from '../src/models/Project.model';
import { Application } from '../src/models/Application.model';
import { Role } from '../src/models/Role.model';
import { Technology } from '../src/models/Technology.model';
import { Category } from '../src/models/Category.model';

interface LegacyData {
  users: any[];
  projects: any[];
  applications: any[];
  roles: any[];
  technologies: any[];
  categories: any[];
}

const migrateData = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await mongoose.connect(config.mongodb.uri);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');

    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ db.json
    const dbPath = path.join(__dirname, '../db.json');
    
    if (!fs.existsSync(dbPath)) {
      console.error('‚ùå –§–∞–π–ª db.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
      process.exit(1);
    }

    const dbData: LegacyData = JSON.parse(fs.readFileSync(dbPath, 'utf8'));
    console.log('üìÅ –î–∞–Ω–Ω—ã–µ –∏–∑ db.json –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    await User.deleteMany({});
    await Project.deleteMany({});
    await Application.deleteMany({});
    await Role.deleteMany({});
    await Technology.deleteMany({});
    await Category.deleteMany({});
    console.log('üßπ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

    // –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
    console.log('üìö –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π...');
    
    // –†–æ–ª–∏
    const rolesData = dbData.roles.map(role => ({
      id: role.id,
      name: role.name,
      description: role.description,
      variant: role.variant,
      color: role.color
    }));
    await Role.insertMany(rolesData);
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${rolesData.length} —Ä–æ–ª–µ–π`);

    // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    const technologiesData = dbData.technologies.map(tech => ({
      id: tech.id,
      name: tech.name,
      category: tech.category,
      icon: tech.icon,
      color: tech.color
    }));
    await Technology.insertMany(technologiesData);
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${technologiesData.length} —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π`);

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesData = dbData.categories.map(cat => ({
      id: cat.id,
      name: cat.name,
      description: cat.description,
      color: cat.color
    }));
    await Category.insertMany(categoriesData);
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${categoriesData.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const userMap = new Map<string, string>(); // oldId -> newId

    for (const user of dbData.users) {
      // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const passwordHash = await bcrypt.hash(user.password || 'defaultPassword123', 12);
      
      const newUser = new User({
        name: user.name,
        email: user.email,
        passwordHash,
        role: user.role || '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
        avatar: user.avatar,
        skills: user.skills || '',
        bio: user.bio,
        experience: parseInt(user.experience) || 0,
        location: user.location,
        portfolio: user.portfolio
      });

      const savedUser = await newUser.save();
      userMap.set(user.id, savedUser._id.toString());
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${dbData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectMap = new Map<string, string>(); // oldId -> newId

    for (const project of dbData.projects) {
      const ownerId = userMap.get(project.ownerId);
      if (!ownerId) {
        console.warn(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ–µ–∫—Ç ${project.name}: –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        continue;
      }

      // –ú–∞–ø–ø–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
      const teamMembers = [];
      if (project.teamMembers && Array.isArray(project.teamMembers)) {
        for (const memberId of project.teamMembers) {
          const mappedMemberId = userMap.get(memberId);
          if (mappedMemberId) {
            teamMembers.push(mappedMemberId);
          }
        }
      }

      const newProject = new Project({
        name: project.name,
        description: project.description,
        status: project.status || '–≤ –ø–æ–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã',
        lookingFor: project.lookingFor || '',
        category: project.category,
        tech: project.tech || [],
        neededRoles: project.neededRoles || [],
        teamSize: parseInt(project.teamSize) || 1,
        currentTeam: teamMembers.length + 1, // +1 –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        budget: project.budget || '',
        timeline: project.timeline || '',
        complexity: project.complexity || '—Å—Ä–µ–¥–Ω–∏–π',
        image: project.image || '',
        features: project.features || [],
        requirements: project.requirements || [],
        ownerId,
        teamMembers
      });

      const savedProject = await newProject.save();
      projectMap.set(project.id, savedProject._id.toString());
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${dbData.projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);

    // –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
    console.log('üìù –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫...');
    let importedApplications = 0;

    for (const application of dbData.applications) {
      const projectId = projectMap.get(application.projectId);
      if (!projectId) {
        console.warn(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞—è–≤–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        continue;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
      let userId = undefined;
      if (application.userId) {
        userId = userMap.get(application.userId);
      }

      const newApplication = new Application({
        projectId,
        userId,
        name: application.name || '–ê–Ω–æ–Ω–∏–º',
        role: application.role || '',
        message: application.message || '',
        status: application.status || 'new'
      });

      await newApplication.save();
      importedApplications++;
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedApplications} –∑–∞—è–≤–æ–∫`);

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${dbData.users.length}`);
    console.log(`   üöÄ –ü—Ä–æ–µ–∫—Ç—ã: ${dbData.projects.length}`);
    console.log(`   üìù –ó–∞—è–≤–∫–∏: ${importedApplications}`);
    console.log(`   üìö –†–æ–ª–∏: ${rolesData.length}`);
    console.log(`   üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${technologiesData.length}`);
    console.log(`   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesData.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateData();
}

export default migrateData;
